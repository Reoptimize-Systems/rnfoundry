function reportstrs = designreport_ROTARY(design, simoptions, reportstrs, varargin)
% produces a rotary electrical machine design report in LaTeX format, and
% optionally prduces the pdf using pdflatex
%
% designreport_ROTARY can also be used to extend a report produced by a
% higher level function by passing in the existing report strings.
%
% Syntax
%
% designreport_ROTARY(design, simoptions)
% designreport_ROTARY(design, simoptions, reportstrs)
% reportstrs = designreport_ROTARY(...)
% 
% Input
%
%
% Output
%
%   reportstrs - cell array of strings containing the report
%

    if nargin < 3
        reportstrs = {};
    end
    
    options.ReportDir = '';
    if nargout == 0
        options.MakePdf = true;
        options.WriteOutReport = true;
    else
        options.MakePdf = false;
        options.WriteOutReport = false;
    end
    options.ReportTemplatePath = fullfile(getmfilepath('designreport_AM'), 'design_report_template.tex');
    
    options = parseoptions(options, varargin);
    
    % generate table of design dimensions
    
    if isfield(design, 'TorquePtoPeak')
        TorquePtoPeak = design.TorquePtoPeak;
    else
        TorquePtoPeak = 'N/A';
    end
    
    if isfield(design, 'TorquePtoMean')
        TorquePtoMean = design.TorquePtoMean;
    else
        TorquePtoMean = 'N/A';
    end
    
    if isfield (design, 'CoggingTorquePeak')
        maxcoggingtq = design.CoggingTorquePeak;
    elseif isfield(design, 'slm_coggingtorque')
        maxcoggingtq = slmpar(design.slm_coggingtorque, 'maxfun');
    else
        maxcoggingtq = 'N/A';
    end
    
    if isnumeric (maxcoggingtq) && strncmpi ( design.ArmatureType, 'i', 1 ) 
        maxcoggingf = maxcoggingtq / (design.Rmi - (design.g/2));
    elseif isnumeric (maxcoggingtq) && strncmpi ( design.ArmatureType, 'e', 1 )
        maxcoggingf = maxcoggingtq / (design.Rmo + (design.g/2));
    else
        maxcoggingf = 'N/A';
    end
    
    if isfield(design, 'gforce')
        gforce = abs(design.ForceGapClosingWithDisp(1));
    else
        gforce = 'N/A';
    end
    
    if isfield(design, 'FrequencyPeak')
        FrequencyPeak = design.FrequencyPeak;
    else
        FrequencyPeak = 'N/A';
    end
    
    if isfield(design, 'TorqueRippleFactor')
        TorqueRippleFactor = design.TorqueRippleFactor * 100;
    else
        TorqueRippleFactor = 'N/A';
    end
    
    % rotary machine properties
    tabledata = [ 
        convertval('Max PTO Torque', 'Nm', TorquePtoPeak);
        convertval('Mean PTO Torque', 'Nm', TorquePtoMean);
        {'Torque Ripple Factor (Percent of Mean)', TorqueRippleFactor};
        convertval('Max Cogging Torque', 'Nm', maxcoggingtq);
        convertval('Max Cogging Force at air gap', 'N', maxcoggingf);
        convertval('Max Estimated Electrical Frequency', 'Hz', FrequencyPeak);
        quantity_to_table_cell_pair('Air Gap Closing Force Per Pole', 'N', design, 'PerPoleAirGapClosingForce');
    ];

    % generate the LaTex table of the outputs
    colheadings = {};
    rowheadings = {};
    colsep = ' & '; 
    rowending = ' \\';
    fms = '.3f';

    % displaytable(cell2mat(data(:,2)), colheadings,wid,fms,rowheadings, fid, colsep, rowending)
    
    fname = tempname;
    
    fid = fopen(fname, 'w');
    
    if fid == -1
        error('Temporary file could not be opened.');
    end
    
    displaytable(tabledata, ...
                 'ColHeadings', colheadings, ...
                 'ColWidth', [60, 20], ...
                 'Format', fms, ...
                 'RowHeadings', rowheadings, ...
                 'FileID', fid, ...
                 'ColSep', colsep, ...
                 'RowEnding', rowending); 
    
    % close the file
    fclose(fid);
    
    rotarydimstablestrs = txtfile2cell(fname);
    
rotaryreportstrs = [{...
'% Beginning section of report generated by designreport_RORARY.m';
'\begin{table}[htb]';
'\centerline{';
'\begin{tabular}{ll}'
'\toprule';
'Description & Value \\';
'\midrule';
}; ...
rotarydimstablestrs;
{...
'\bottomrule';
'\end{tabular}';
'}';
'\caption{Rotary specific simulation outputs.}';
'\end{table}';
'% FloatBarrier requires the placeins package';
'\FloatBarrier{}';
'';
}; ...
];

    % append stuff common to all machines
    radialreportstrs = designreport_AM(design, simoptions, rotaryreportstrs, options);
    
    % append the report strings
    reportstrs = [ reportstrs;
                   radialreportstrs ];

end

function out = convertval (name, unit, val, scalefac)

    if nargin < 4
        scalefac = 1;
    end

    if isnumeric (val)
        % stuff val in a dummy structure so we can use
        % quantity_to_table_cell_pair to make it pretty
        S = struct ('x', val);

        out = quantity_to_table_cell_pair (name, unit, S, 'x', scalefac);
    
    elseif ischar (val)
        % the value is a string (probably 'N\A') just return it as it is.
        out = {name, val};
       
    else
        
        error ('Invalid input to convertval')
       
    end
    
end
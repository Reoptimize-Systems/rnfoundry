function reportstrs = designreport_RADIAL(design, simoptions, reportstrs, varargin)
% produces a radial flux electrical machine design report in LaTeX format,
% and optionally prduces the pdf using pdflatex
%
% designreport_RADIAL can also be used to extend a report produced by a
% higher level function by passing in the existing report strings.
%
% Syntax
%
% designreport_RADIAL(design, simoptions)
% designreport_RADIAL(design, simoptions, reportstrs)
% reportstrs = designreport_RADIAL(...)
% 
% Input
%
%
% Output
%
%   reportstrs - cell array of strings containing the report
%

    if nargin < 3
        reportstrs = {};
    end
    
    options.ReportDir = '';
    if nargout == 0
        options.MakePdf = true;
        options.WriteOutReport = true;
    else
        options.MakePdf = false;
        options.WriteOutReport = false;
    end
    options.ReportTemplatePath = fullfile(getmfilepath('designreport_AM'), 'design_report_template.tex');
    
    options = parseoptions(options, varargin);
    
    % generate table of design dimensions
    
    % radial flux rotor dimensions
    tabledata = { ...
        '$R_{mi}$', 'Inner Magnet radius. (mm)', design.Rmi*1000;
        '$R_{mo}$', 'Outer Magnet radius. (mm)', design.Rmo*1000;
        '$R_{mm}$', 'Mean magnet radius. (mm)', design.Rmm*1000;
        '$R_{bi}$', 'Inner field back iron radius. (mm)', design.Rbi*1000;
        '$R_{bo}$', 'Outer field back iron radius. (mm)', design.Rbo*1000;
        '$g$', 'Air gap (mm)', design.g * 1000;
        '$t_m$',    'Magnet thickness in radial direction. (mm)', design.tm*1000;
        '$t_{bi}$', 'Back Iron thickness in radial direction. (mm)', design.tbi*1000;
        '$\theta_{p}$', 'Pole pitch angle. (rad)', design.thetap;
        '$\theta_{m}$', 'Magnet pitch angle. (rad)', design.thetam;
        '$\theta_{p}$', 'Pole pitch angle. (degrees)', rad2deg(design.thetap);
        '$\theta_{m}$', 'Magnet pitch angle. (degrees)', rad2deg(design.thetam);
        '$\tau_{pm}$', 'Pole pitch at mean magnet radius. (mm)', design.thetap*design.Rmm*1000;
        '$\tau_{mm}$', 'Magnet pitch at mean magnet radius. (mm)', design.thetam*design.Rmm*1000;
        '$l_s$',    'Stack length. (mm)', design.ls*1000;
        '', 'Magnet Skew (Fraction of Pole)', design.MagnetSkew(1);
        '', 'Magnet Skew Angle (Degrees)', rad2deg(design.MagnetSkew(1) * design.thetap);
        '', 'Number of Magnets Per Pole for Skew', design.NSkewMagnetsPerPole;
    };

    % generate the LaTex table of the outputs
    colheadings = {};
    rowheadings = {};
    colsep = ' & '; 
    rowending = ' \\';
    fms = '.3f';

    % displaytable(cell2mat(data(:,2)), colheadings,wid,fms,rowheadings, fid, colsep, rowending)
    
    fname = tempname;
    
    fid = fopen(fname, 'w');
    
    if fid == -1
        error('Temporary file could not be opened.');
    end
    
    displaytable(tabledata, ...
                 'ColHeadings', colheadings, ...
                 'ColWidth', [30, 60, 20], ...
                 'Format', fms, ...
                 'RowHeadings', rowheadings, ...
                 'FileID', fid, ...
                 'ColSep', colsep, ...
                 'RowEnding', rowending);
    
    % close the file
    fclose(fid);
    
    radrotordimstablestrs = txtfile2cell(fname);
    
radialreportstrs = [{...
'% Beginning section of report generated by designreport_RADIAL.m';
'\begin{table}[htb]';
'\centerline{';
'\begin{tabular}{lll}'
'\toprule';
'Dimension & Description & Value \\';
'\midrule';
}; ...
radrotordimstablestrs;
{...
'\bottomrule';
'\end{tabular}';
'}';
'\caption{Field dimensions.}';
'\end{table}';
'\begin{table}[htb]';
'\centerline{';
'\begin{tabular}{ll}'
'\toprule';
'Component & Material \\';
'\midrule';
['Field Back Iron &', design.MagFEASimMaterials.FieldBackIron.Name, '\\'];
['Magnet &', design.MagFEASimMaterials.Magnet.Name, '\\'];
'\bottomrule';
'\end{tabular}';
'}';
'\caption{Field materials.}';
'\end{table}';
'% FloatBarrier requires the placeins package';
'\FloatBarrier{}';
'';
}; ...
];

    % append stuff common to all machines
    radialreportstrs = designreport_ROTARY(design, simoptions, radialreportstrs, options);
    
    % append the report strings
    reportstrs = [ reportstrs;
                   radialreportstrs ];

end